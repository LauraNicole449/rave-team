---
import Link from "./Link.astro";
import LogoRave from "../assets/Logo-Rave.svg";

const menuItems = [
	{ to: "#games", label: "GAMES" },
	{ to: "#news", label: "NEWS" },
	{ to: "#about", label: "ABOUT" },
	{ to: "#contact", label: "CONTACT" },
];
---

<nav
  class="fixed bg-transparent flex w-full m-auto items-center justify-center top-0 py-3 left-0 z-50"
  id="main-nav"
>
  <section class="flex justify-between max-w-6xl w-full mx-auto px-4">
    <a href="/" class="group">
      <div
        class="w-[72px] h-[70px] rounded-full flex items-center justify-center transition-transform duration-200 group-hover:scale-105 group-hover:shadow-lg"
        style="
        background: linear-gradient(180deg, #B485FF4D 30%, #B485FF 100%);
        box-shadow: inset 3.23px 3.23px 2.58px rgba(255, 255, 255, 0.08);
      "
      >
        <LogoRave class="w-[50px] h-[48px]" />
      </div>
    </a>

    <ul
      class="flex text-2xl tracking-wider inner-text-shadow font-luckiest-guy items-center gap-8 text-white"
    >
      <li class="theme-shadow-text lg:hidden">
        <Link to="#" class="w-full text-left"> MENU </Link>
      </li>
      {
        menuItems.map(({ to, label }) => (
          <li class="hidden theme-shadow-text lg:block">
            <Link
              to={to}
              class="nav-link relative inline-block after:block after:absolute after:left-0 after:bottom-0 after:h-[4px] after:w-0 after:bg-current after:transition-all after:duration-400 hover:after:w-full focus:after:w-full"
            >
              {label}
            </Link>
          </li>
        ))
      }
    </ul>
  </section>
</nav>



<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    const nav = document.getElementById("main-nav");
    const hero = document.querySelector("#hero");
    const links = document.querySelectorAll(".nav-link");
    const activeClass = "after:w-full";

    if (hero && nav) {
      const navObserver = new IntersectionObserver(
        ([entry]) => {
          const isHeroVisible = entry.isIntersecting;
          nav.classList.toggle("bg-primary", !isHeroVisible);
          nav.classList.toggle("bg-transparent", isHeroVisible);
        },
        { threshold: 0.4 }
      );

      navObserver.observe(hero);
    }

    const sectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = `#${entry.target.id}`;
          const link = document.querySelector(`.nav-link[href="${id}"]`);
          if (link) {
            link.classList.toggle(activeClass, entry.isIntersecting);
          }
        });
      },
      { threshold: 0.6 }
    );

    function updateActiveLinkByHash(hashValue) {
      links.forEach((link) => {
        link.classList.toggle(activeClass, link.getAttribute("href") === hashValue);
      });
    }

    updateActiveLinkByHash(window.location.hash || "");

    window.addEventListener("hashchange", () => {
      updateActiveLinkByHash(window.location.hash || "");
    });

    links.forEach((link) => {
      const sectionId = link.getAttribute("href");
      if (sectionId?.startsWith("#")) {
        const section = document.querySelector(sectionId);
        if (section) sectionObserver.observe(section);
      }
    });
  });
</script>
